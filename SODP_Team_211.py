# -*- coding: utf-8 -*-
"""SODP Team 211.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eCOQcgD09tt9LRrJndUDcRDAKn2rU0X4

# Import package
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

"""# Read data"""

university = pd.read_csv('/content/Admission_Predict.csv')

university.head(5)

"""# Data Wrangling"""

university.isna().sum()

def admit(x):
  if x >= 0.8:
    return 'certain'
  elif x >= 0.6:
    return 'likely'
  elif x >= 0.4:
    return 'possible'
  elif x >= 0.2:
    return 'unlikely'

university['Admit'] = university.apply(lambda row: admit(row['Chance of Admit ']), axis=1)

university['GPA']=university['CGPA'].apply(lambda cgpa: cgpa/10.0*4.0)

university.head(5)

"""# Plotting"""

fig, axes = plt.subplots(1, 5, figsize=(22, 6))
ax1 = axes[0]
sns.distplot(university['Chance of Admit '], ax = ax1)
ax2 = axes[1]
sns.histplot(x='GRE Score', data=university, ax=ax2)
ax3 = axes[2]
sns.regplot(x='Chance of Admit ', y='GRE Score', data=university, ax = ax3)
ax4 = axes[3]
sns.regplot(x='Chance of Admit ', y='TOEFL Score', data=university, ax = ax4)
ax5 = axes[4]
sns.regplot(x='Chance of Admit ', y='GPA', data=university, ax = ax5)

fig, axes = plt.subplots(1, 3, figsize=(15, 6))
ax1 = axes[0]
sns.boxplot(university['GRE Score'], ax=ax1)
ax2 = axes[1]
sns.boxplot(university['GPA'], ax=ax2)
ax3 = axes[2]
sns.regplot(x=university['GPA'], y=university['GRE Score'], order=4, ax=ax3)

corr = university[['TOEFL Score', 'GRE Score', 'SOP', 'LOR ', 'GPA']].corr()
print(corr)
sns.heatmap(corr, linecolor='white',xticklabels = corr.columns, yticklabels = corr.columns)

"""# Model training"""

features = ['GRE Score',
 'TOEFL Score',
 'University Rating',
 'SOP',
 'Research',
 'GPA']
target = "Admit"

X = university[features]
y = university[target]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=17)

"""### Logistic Regression"""

model = LogisticRegression(solver='newton-cg')
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
accuracy_score(y_test, y_pred)

for i in range(len(features)):
  print(features[i] + ": " + str(model.coef_[0][i]))

parameters = {'solver':['newton-cg','lbfgs','liblinear','sag','saga'], 
              'max_iter':[100,125,150,200], 'multi_class':['auto','ovr','multinomial']}
logit = LogisticRegression()
clf = GridSearchCV(estimator=logit, param_grid=parameters, n_jobs=-1, cv=10)
clf.fit(X_train, y_train)

clf.best_params_

"""### K Nearest Neighbor"""

model = KNeighborsClassifier(n_neighbors=15, p=1, weights='distance')
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
accuracy_score(y_test, y_pred)

parameters = {'n_neighbors':[5,10,15,20,25], 'weights':['uniform','distance'], 
              'algorithm':['auto','ball_tree','kd_tree','brute'], 'p':[1,2]}
knn = KNeighborsClassifier()
clf = GridSearchCV(estimator=knn, param_grid=parameters, n_jobs=-1, cv=10)
clf.fit(X_train, y_train)

clf.best_params_

"""### Random Forest"""

model = RandomForestClassifier(max_depth=5, n_estimators=100)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
accuracy_score(y_test, y_pred)

cross_val_score(model, X_train, y_train, cv=5)

parameters = {'n_estimators':[5,25,50,100,150,200,250], 'criterion':['gini','entropy'], 
              'max_depth':[5,10,15,20,25], 'max_features':['auto','sqrt','log2']}
forest = RandomForestClassifier(max_depth=5, max_features='sqrt')
clf = GridSearchCV(estimator=forest, param_grid=parameters, n_jobs=-1, cv=10)
clf.fit(X_train, y_train)

clf.best_params_

"""Displayï¼š"""

gre = input('Enter your GRE score: ')
toefl = input('Enter your TOEFL score: ')
rating = input('Enter the rating of the university you apply for: ')
import ipywidgets as iw
from IPython.display import display
sop=iw.Dropdown(options=[0,0.5,1,1.5,2,2.5,3,3.5,4,4.5,5], value=0, description='SOP: ')
print('Enter your Statement of Purpose score: ')
display(sop)
print('Do you have any research experience?')
research = iw.Dropdown(options=[0,1], value=0, description='research: ')
display(research)
gpa = input('Enter your gpa: ')

input = [[gre, toefl, rating, sop.value, research.value, gpa]]
df = pd.DataFrame(input, columns=['GRE Score',
 'TOEFL Score',
 'University Rating',
 'SOP',
 'Research',
 'GPA'])
print(model.predict(df))